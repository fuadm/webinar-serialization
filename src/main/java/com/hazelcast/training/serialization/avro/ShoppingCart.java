/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.hazelcast.training.serialization.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ShoppingCart extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6337178606113664600L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ShoppingCart\",\"namespace\":\"com.hazelcast.training.serialization.avro\",\"fields\":[{\"name\":\"total\",\"type\":\"long\"},{\"name\":\"date\",\"type\":\"long\",\"logicalType\":\"date\"},{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"items\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ShoppingCartItem\",\"fields\":[{\"name\":\"cost\",\"type\":\"long\"},{\"name\":\"quantity\",\"type\":\"int\"},{\"name\":\"itemName\",\"type\":\"string\"},{\"name\":\"inStock\",\"type\":\"boolean\"},{\"name\":\"url\",\"type\":\"string\"}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long total;
  @Deprecated public long date;
  @Deprecated public long id;
  @Deprecated public java.util.List<com.hazelcast.training.serialization.avro.ShoppingCartItem> items;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ShoppingCart() {}

  /**
   * All-args constructor.
   * @param total The new value for total
   * @param date The new value for date
   * @param id The new value for id
   * @param items The new value for items
   */
  public ShoppingCart(java.lang.Long total, java.lang.Long date, java.lang.Long id, java.util.List<com.hazelcast.training.serialization.avro.ShoppingCartItem> items) {
    this.total = total;
    this.date = date;
    this.id = id;
    this.items = items;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return total;
    case 1: return date;
    case 2: return id;
    case 3: return items;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: total = (java.lang.Long)value$; break;
    case 1: date = (java.lang.Long)value$; break;
    case 2: id = (java.lang.Long)value$; break;
    case 3: items = (java.util.List<com.hazelcast.training.serialization.avro.ShoppingCartItem>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'total' field.
   * @return The value of the 'total' field.
   */
  public java.lang.Long getTotal() {
    return total;
  }

  /**
   * Sets the value of the 'total' field.
   * @param value the value to set.
   */
  public void setTotal(java.lang.Long value) {
    this.total = value;
  }

  /**
   * Gets the value of the 'date' field.
   * @return The value of the 'date' field.
   */
  public java.lang.Long getDate() {
    return date;
  }

  /**
   * Sets the value of the 'date' field.
   * @param value the value to set.
   */
  public void setDate(java.lang.Long value) {
    this.date = value;
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.Long getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'items' field.
   * @return The value of the 'items' field.
   */
  public java.util.List<com.hazelcast.training.serialization.avro.ShoppingCartItem> getItems() {
    return items;
  }

  /**
   * Sets the value of the 'items' field.
   * @param value the value to set.
   */
  public void setItems(java.util.List<com.hazelcast.training.serialization.avro.ShoppingCartItem> value) {
    this.items = value;
  }

  /**
   * Creates a new ShoppingCart RecordBuilder.
   * @return A new ShoppingCart RecordBuilder
   */
  public static com.hazelcast.training.serialization.avro.ShoppingCart.Builder newBuilder() {
    return new com.hazelcast.training.serialization.avro.ShoppingCart.Builder();
  }

  /**
   * Creates a new ShoppingCart RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ShoppingCart RecordBuilder
   */
  public static com.hazelcast.training.serialization.avro.ShoppingCart.Builder newBuilder(com.hazelcast.training.serialization.avro.ShoppingCart.Builder other) {
    return new com.hazelcast.training.serialization.avro.ShoppingCart.Builder(other);
  }

  /**
   * Creates a new ShoppingCart RecordBuilder by copying an existing ShoppingCart instance.
   * @param other The existing instance to copy.
   * @return A new ShoppingCart RecordBuilder
   */
  public static com.hazelcast.training.serialization.avro.ShoppingCart.Builder newBuilder(com.hazelcast.training.serialization.avro.ShoppingCart other) {
    return new com.hazelcast.training.serialization.avro.ShoppingCart.Builder(other);
  }

  /**
   * RecordBuilder for ShoppingCart instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ShoppingCart>
    implements org.apache.avro.data.RecordBuilder<ShoppingCart> {

    private long total;
    private long date;
    private long id;
    private java.util.List<com.hazelcast.training.serialization.avro.ShoppingCartItem> items;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.hazelcast.training.serialization.avro.ShoppingCart.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.total)) {
        this.total = data().deepCopy(fields()[0].schema(), other.total);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.date)) {
        this.date = data().deepCopy(fields()[1].schema(), other.date);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.id)) {
        this.id = data().deepCopy(fields()[2].schema(), other.id);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.items)) {
        this.items = data().deepCopy(fields()[3].schema(), other.items);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ShoppingCart instance
     * @param other The existing instance to copy.
     */
    private Builder(com.hazelcast.training.serialization.avro.ShoppingCart other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.total)) {
        this.total = data().deepCopy(fields()[0].schema(), other.total);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.date)) {
        this.date = data().deepCopy(fields()[1].schema(), other.date);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.id)) {
        this.id = data().deepCopy(fields()[2].schema(), other.id);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.items)) {
        this.items = data().deepCopy(fields()[3].schema(), other.items);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'total' field.
      * @return The value.
      */
    public java.lang.Long getTotal() {
      return total;
    }

    /**
      * Sets the value of the 'total' field.
      * @param value The value of 'total'.
      * @return This builder.
      */
    public com.hazelcast.training.serialization.avro.ShoppingCart.Builder setTotal(long value) {
      validate(fields()[0], value);
      this.total = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'total' field has been set.
      * @return True if the 'total' field has been set, false otherwise.
      */
    public boolean hasTotal() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'total' field.
      * @return This builder.
      */
    public com.hazelcast.training.serialization.avro.ShoppingCart.Builder clearTotal() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'date' field.
      * @return The value.
      */
    public java.lang.Long getDate() {
      return date;
    }

    /**
      * Sets the value of the 'date' field.
      * @param value The value of 'date'.
      * @return This builder.
      */
    public com.hazelcast.training.serialization.avro.ShoppingCart.Builder setDate(long value) {
      validate(fields()[1], value);
      this.date = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'date' field has been set.
      * @return True if the 'date' field has been set, false otherwise.
      */
    public boolean hasDate() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'date' field.
      * @return This builder.
      */
    public com.hazelcast.training.serialization.avro.ShoppingCart.Builder clearDate() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.Long getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.hazelcast.training.serialization.avro.ShoppingCart.Builder setId(long value) {
      validate(fields()[2], value);
      this.id = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.hazelcast.training.serialization.avro.ShoppingCart.Builder clearId() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'items' field.
      * @return The value.
      */
    public java.util.List<com.hazelcast.training.serialization.avro.ShoppingCartItem> getItems() {
      return items;
    }

    /**
      * Sets the value of the 'items' field.
      * @param value The value of 'items'.
      * @return This builder.
      */
    public com.hazelcast.training.serialization.avro.ShoppingCart.Builder setItems(java.util.List<com.hazelcast.training.serialization.avro.ShoppingCartItem> value) {
      validate(fields()[3], value);
      this.items = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'items' field has been set.
      * @return True if the 'items' field has been set, false otherwise.
      */
    public boolean hasItems() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'items' field.
      * @return This builder.
      */
    public com.hazelcast.training.serialization.avro.ShoppingCart.Builder clearItems() {
      items = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public ShoppingCart build() {
      try {
        ShoppingCart record = new ShoppingCart();
        record.total = fieldSetFlags()[0] ? this.total : (java.lang.Long) defaultValue(fields()[0]);
        record.date = fieldSetFlags()[1] ? this.date : (java.lang.Long) defaultValue(fields()[1]);
        record.id = fieldSetFlags()[2] ? this.id : (java.lang.Long) defaultValue(fields()[2]);
        record.items = fieldSetFlags()[3] ? this.items : (java.util.List<com.hazelcast.training.serialization.avro.ShoppingCartItem>) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
