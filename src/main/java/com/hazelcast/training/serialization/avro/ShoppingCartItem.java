/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.hazelcast.training.serialization.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ShoppingCartItem extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -770080597365466373L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ShoppingCartItem\",\"namespace\":\"com.hazelcast.training.serialization.avro\",\"fields\":[{\"name\":\"cost\",\"type\":\"long\"},{\"name\":\"quantity\",\"type\":\"int\"},{\"name\":\"itemName\",\"type\":\"string\"},{\"name\":\"inStock\",\"type\":\"boolean\"},{\"name\":\"url\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long cost;
  @Deprecated public int quantity;
  @Deprecated public java.lang.CharSequence itemName;
  @Deprecated public boolean inStock;
  @Deprecated public java.lang.CharSequence url;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ShoppingCartItem() {}

  /**
   * All-args constructor.
   * @param cost The new value for cost
   * @param quantity The new value for quantity
   * @param itemName The new value for itemName
   * @param inStock The new value for inStock
   * @param url The new value for url
   */
  public ShoppingCartItem(java.lang.Long cost, java.lang.Integer quantity, java.lang.CharSequence itemName, java.lang.Boolean inStock, java.lang.CharSequence url) {
    this.cost = cost;
    this.quantity = quantity;
    this.itemName = itemName;
    this.inStock = inStock;
    this.url = url;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return cost;
    case 1: return quantity;
    case 2: return itemName;
    case 3: return inStock;
    case 4: return url;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: cost = (java.lang.Long)value$; break;
    case 1: quantity = (java.lang.Integer)value$; break;
    case 2: itemName = (java.lang.CharSequence)value$; break;
    case 3: inStock = (java.lang.Boolean)value$; break;
    case 4: url = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'cost' field.
   * @return The value of the 'cost' field.
   */
  public java.lang.Long getCost() {
    return cost;
  }

  /**
   * Sets the value of the 'cost' field.
   * @param value the value to set.
   */
  public void setCost(java.lang.Long value) {
    this.cost = value;
  }

  /**
   * Gets the value of the 'quantity' field.
   * @return The value of the 'quantity' field.
   */
  public java.lang.Integer getQuantity() {
    return quantity;
  }

  /**
   * Sets the value of the 'quantity' field.
   * @param value the value to set.
   */
  public void setQuantity(java.lang.Integer value) {
    this.quantity = value;
  }

  /**
   * Gets the value of the 'itemName' field.
   * @return The value of the 'itemName' field.
   */
  public java.lang.CharSequence getItemName() {
    return itemName;
  }

  /**
   * Sets the value of the 'itemName' field.
   * @param value the value to set.
   */
  public void setItemName(java.lang.CharSequence value) {
    this.itemName = value;
  }

  /**
   * Gets the value of the 'inStock' field.
   * @return The value of the 'inStock' field.
   */
  public java.lang.Boolean getInStock() {
    return inStock;
  }

  /**
   * Sets the value of the 'inStock' field.
   * @param value the value to set.
   */
  public void setInStock(java.lang.Boolean value) {
    this.inStock = value;
  }

  /**
   * Gets the value of the 'url' field.
   * @return The value of the 'url' field.
   */
  public java.lang.CharSequence getUrl() {
    return url;
  }

  /**
   * Sets the value of the 'url' field.
   * @param value the value to set.
   */
  public void setUrl(java.lang.CharSequence value) {
    this.url = value;
  }

  /**
   * Creates a new ShoppingCartItem RecordBuilder.
   * @return A new ShoppingCartItem RecordBuilder
   */
  public static com.hazelcast.training.serialization.avro.ShoppingCartItem.Builder newBuilder() {
    return new com.hazelcast.training.serialization.avro.ShoppingCartItem.Builder();
  }

  /**
   * Creates a new ShoppingCartItem RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ShoppingCartItem RecordBuilder
   */
  public static com.hazelcast.training.serialization.avro.ShoppingCartItem.Builder newBuilder(com.hazelcast.training.serialization.avro.ShoppingCartItem.Builder other) {
    return new com.hazelcast.training.serialization.avro.ShoppingCartItem.Builder(other);
  }

  /**
   * Creates a new ShoppingCartItem RecordBuilder by copying an existing ShoppingCartItem instance.
   * @param other The existing instance to copy.
   * @return A new ShoppingCartItem RecordBuilder
   */
  public static com.hazelcast.training.serialization.avro.ShoppingCartItem.Builder newBuilder(com.hazelcast.training.serialization.avro.ShoppingCartItem other) {
    return new com.hazelcast.training.serialization.avro.ShoppingCartItem.Builder(other);
  }

  /**
   * RecordBuilder for ShoppingCartItem instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ShoppingCartItem>
    implements org.apache.avro.data.RecordBuilder<ShoppingCartItem> {

    private long cost;
    private int quantity;
    private java.lang.CharSequence itemName;
    private boolean inStock;
    private java.lang.CharSequence url;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.hazelcast.training.serialization.avro.ShoppingCartItem.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.cost)) {
        this.cost = data().deepCopy(fields()[0].schema(), other.cost);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.quantity)) {
        this.quantity = data().deepCopy(fields()[1].schema(), other.quantity);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.itemName)) {
        this.itemName = data().deepCopy(fields()[2].schema(), other.itemName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.inStock)) {
        this.inStock = data().deepCopy(fields()[3].schema(), other.inStock);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.url)) {
        this.url = data().deepCopy(fields()[4].schema(), other.url);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ShoppingCartItem instance
     * @param other The existing instance to copy.
     */
    private Builder(com.hazelcast.training.serialization.avro.ShoppingCartItem other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.cost)) {
        this.cost = data().deepCopy(fields()[0].schema(), other.cost);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.quantity)) {
        this.quantity = data().deepCopy(fields()[1].schema(), other.quantity);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.itemName)) {
        this.itemName = data().deepCopy(fields()[2].schema(), other.itemName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.inStock)) {
        this.inStock = data().deepCopy(fields()[3].schema(), other.inStock);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.url)) {
        this.url = data().deepCopy(fields()[4].schema(), other.url);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'cost' field.
      * @return The value.
      */
    public java.lang.Long getCost() {
      return cost;
    }

    /**
      * Sets the value of the 'cost' field.
      * @param value The value of 'cost'.
      * @return This builder.
      */
    public com.hazelcast.training.serialization.avro.ShoppingCartItem.Builder setCost(long value) {
      validate(fields()[0], value);
      this.cost = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'cost' field has been set.
      * @return True if the 'cost' field has been set, false otherwise.
      */
    public boolean hasCost() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'cost' field.
      * @return This builder.
      */
    public com.hazelcast.training.serialization.avro.ShoppingCartItem.Builder clearCost() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'quantity' field.
      * @return The value.
      */
    public java.lang.Integer getQuantity() {
      return quantity;
    }

    /**
      * Sets the value of the 'quantity' field.
      * @param value The value of 'quantity'.
      * @return This builder.
      */
    public com.hazelcast.training.serialization.avro.ShoppingCartItem.Builder setQuantity(int value) {
      validate(fields()[1], value);
      this.quantity = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'quantity' field has been set.
      * @return True if the 'quantity' field has been set, false otherwise.
      */
    public boolean hasQuantity() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'quantity' field.
      * @return This builder.
      */
    public com.hazelcast.training.serialization.avro.ShoppingCartItem.Builder clearQuantity() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'itemName' field.
      * @return The value.
      */
    public java.lang.CharSequence getItemName() {
      return itemName;
    }

    /**
      * Sets the value of the 'itemName' field.
      * @param value The value of 'itemName'.
      * @return This builder.
      */
    public com.hazelcast.training.serialization.avro.ShoppingCartItem.Builder setItemName(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.itemName = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'itemName' field has been set.
      * @return True if the 'itemName' field has been set, false otherwise.
      */
    public boolean hasItemName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'itemName' field.
      * @return This builder.
      */
    public com.hazelcast.training.serialization.avro.ShoppingCartItem.Builder clearItemName() {
      itemName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'inStock' field.
      * @return The value.
      */
    public java.lang.Boolean getInStock() {
      return inStock;
    }

    /**
      * Sets the value of the 'inStock' field.
      * @param value The value of 'inStock'.
      * @return This builder.
      */
    public com.hazelcast.training.serialization.avro.ShoppingCartItem.Builder setInStock(boolean value) {
      validate(fields()[3], value);
      this.inStock = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'inStock' field has been set.
      * @return True if the 'inStock' field has been set, false otherwise.
      */
    public boolean hasInStock() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'inStock' field.
      * @return This builder.
      */
    public com.hazelcast.training.serialization.avro.ShoppingCartItem.Builder clearInStock() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'url' field.
      * @return The value.
      */
    public java.lang.CharSequence getUrl() {
      return url;
    }

    /**
      * Sets the value of the 'url' field.
      * @param value The value of 'url'.
      * @return This builder.
      */
    public com.hazelcast.training.serialization.avro.ShoppingCartItem.Builder setUrl(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.url = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'url' field has been set.
      * @return True if the 'url' field has been set, false otherwise.
      */
    public boolean hasUrl() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'url' field.
      * @return This builder.
      */
    public com.hazelcast.training.serialization.avro.ShoppingCartItem.Builder clearUrl() {
      url = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public ShoppingCartItem build() {
      try {
        ShoppingCartItem record = new ShoppingCartItem();
        record.cost = fieldSetFlags()[0] ? this.cost : (java.lang.Long) defaultValue(fields()[0]);
        record.quantity = fieldSetFlags()[1] ? this.quantity : (java.lang.Integer) defaultValue(fields()[1]);
        record.itemName = fieldSetFlags()[2] ? this.itemName : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.inStock = fieldSetFlags()[3] ? this.inStock : (java.lang.Boolean) defaultValue(fields()[3]);
        record.url = fieldSetFlags()[4] ? this.url : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
